<?xml version="1.0"?>
<!DOCTYPE module PUBLIC
    "-//Puppy Crawl//DTD Check Configuration 1.3//EN"
    "http://www.puppycrawl.com/dtds/configuration_1_3.dtd">
<module name="Checker">
    <property
        name="charset"
        value="UTF-8"/>
    <property
        name="severity"
        value="warning"/>
    <property
        name="fileExtensions"
        value="java, properties, xml"/>
    <!-- Checks for whitespace                               -->
    <!-- See http://checkstyle.sf.net/config_whitespace.html -->
    <module name="FileTabCharacter">
        <property
            name="eachLine"
            value="true"/>
    </module>
    <module name="NewlineAtEndOfFile">
        <property
            name="lineSeparator"
            value="lf"/>
    </module>
    <module name="SuppressWarningsFilter"/>
    <module name="TreeWalker">
        <module name="SuppressWarningsHolder"/>
        <module name="OuterTypeFilename"/>
        <module name="IllegalTokenText">
            <property
                name="tokens"
                value="STRING_LITERAL, CHAR_LITERAL"/>
            <property
                name="format"
                value="\\u00(08|09|0(a|A)|0(c|C)|0(d|D)|22|27|5(C|c))|\\(0(10|11|12|14|15|42|47)|134)"/>
            <property
                name="message"
                value="Avoid using corresponding octal or Unicode escape."/>
        </module>
        <module name="AvoidEscapedUnicodeCharacters">
            <property
                name="allowEscapesForControlCharacters"
                value="true"/>
            <property
                name="allowByTailComment"
                value="true"/>
            <property
                name="allowNonPrintableEscapes"
                value="true"/>
        </module>
        <module name="AvoidStarImport"/>
        <module name="AvoidStaticImport"/>
        <module name="OneTopLevelClass"/>
        <module name="NoLineWrap"/>
        <module name="EmptyBlock">
            <property
                name="option"
                value="TEXT"/>
            <property
                name="tokens"
                value="LITERAL_TRY, LITERAL_FINALLY, LITERAL_IF, LITERAL_ELSE, LITERAL_SWITCH"/>
        </module>
        <module name="RightCurly">
            <property
                name="id"
                value="RightCurlyDefault"/>
        </module>
        <module name="RightCurly">
            <property
                name="id"
                value="RightCurlyAlone"/>
            <property
                name="option"
                value="alone"/>
            <property
                name="tokens"
                value="CLASS_DEF, METHOD_DEF, CTOR_DEF, LITERAL_FOR, LITERAL_WHILE, LITERAL_DO, STATIC_INIT, INSTANCE_INIT"/>
        </module>
        <module name="WhitespaceAround">
            <property
                name="allowEmptyConstructors"
                value="true"/>
            <property
                name="allowEmptyMethods"
                value="true"/>
            <property
                name="allowEmptyTypes"
                value="true"/>
            <property
                name="allowEmptyLoops"
                value="true"/>
            <message
                key="ws.notFollowed"
                value="WhitespaceAround: ''{0}'' is not followed by whitespace. Empty blocks may only be represented as '{}' when not part of a multi-block statement (4.1.3)"/>
            <message
                key="ws.notPreceded"
                value="WhitespaceAround: ''{0}'' is not preceded with whitespace."/>
        </module>
        <module name="OneStatementPerLine"/>
        <module name="MultipleVariableDeclarations"/>
        <module name="ArrayTypeStyle"/>
        <module name="MissingSwitchDefault"/>
        <module name="DefaultComesLast"/>
        <module name="FallThrough"/>
        <module name="UpperEll"/>
        <module name="ModifierOrder"/>
        <module name="EmptyLineSeparator">
            <property
                name="allowNoEmptyLineBetweenFields"
                value="true"/>
        </module>
        <module name="SeparatorWrap">
            <property
                name="id"
                value="SeparatorWrapDot"/>
            <property
                name="tokens"
                value="DOT"/>
            <property
                name="option"
                value="nl"/>
        </module>
        <module name="SeparatorWrap">
            <property
                name="id"
                value="SeparatorWrapComma"/>
            <property
                name="tokens"
                value="COMMA"/>
            <property
                name="option"
                value="EOL"/>
        </module>
        <module name="PackageName">
            <property
                name="format"
                value="^[a-z]+(\.[a-z][a-z0-9]*)*$"/>
            <message
                key="name.invalidPattern"
                value="Package name ''{0}'' must match pattern ''{1}''."/>
        </module>
        <module name="TypeName">
            <message
                key="name.invalidPattern"
                value="Type name ''{0}'' must match pattern ''{1}''."/>
        </module>
        <module name="MemberName">
            <property
                name="format"
                value="^[a-z]([a-zA-Z0-9]*)?$"/>
            <message
                key="name.invalidPattern"
                value="Member name ''{0}'' must match pattern ''{1}''."/>
        </module>
        <module name="ParameterName">
            <property
                name="id"
                value="ParameterNamePublic"/>
            <property
                name="format"
                value="^[a-z]([a-zA-Z0-9]*)?$"/>
            <property
                name="accessModifiers"
                value="public"/>
            <message
                key="name.invalidPattern"
                value="Parameter name ''{0}'' must match pattern ''{1}''."/>
        </module>
        <module name="CatchParameterName">
            <property
                name="format"
                value="^[a-z]([a-zA-Z0-9]*)?$"/>
            <message
                key="name.invalidPattern"
                value="Catch parameter name ''{0}'' must match pattern ''{1}''."/>
        </module>
        <module name="LocalVariableName">
            <property
                name="tokens"
                value="VARIABLE_DEF"/>
            <property
                name="format"
                value="^[a-z]([a-zA-Z0-9]*)?$"/>
            <property
                name="allowOneCharVarInForLoop"
                value="true"/>
            <message
                key="name.invalidPattern"
                value="Local variable name ''{0}'' must match pattern ''{1}''."/>
        </module>
        <module name="ClassTypeParameterName">
            <property
                name="format"
                value="(^[A-Z][0-9]?)$|([A-Z][a-zA-Z0-9]*[T]$)"/>
            <message
                key="name.invalidPattern"
                value="Class type name ''{0}'' must match pattern ''{1}''."/>
        </module>
        <module name="MethodTypeParameterName">
            <property
                name="format"
                value="(^[A-Z][0-9]?)$|([A-Z][a-zA-Z0-9]*[T]$)"/>
            <message
                key="name.invalidPattern"
                value="Method type name ''{0}'' must match pattern ''{1}''."/>
        </module>
        <module name="InterfaceTypeParameterName">
            <property
                name="format"
                value="(^[A-Z][0-9]?)$|([A-Z][a-zA-Z0-9]*[T]$)"/>
            <message
                key="name.invalidPattern"
                value="Interface type name ''{0}'' must match pattern ''{1}''."/>
        </module>
        <module name="NoFinalizer"/>
        <module name="GenericWhitespace">
            <message
                key="ws.followed"
                value="GenericWhitespace ''{0}'' is followed by whitespace."/>
            <message
                key="ws.preceded"
                value="GenericWhitespace ''{0}'' is preceded with whitespace."/>
            <message
                key="ws.illegalFollow"
                value="GenericWhitespace ''{0}'' should followed by whitespace."/>
            <message
                key="ws.notPreceded"
                value="GenericWhitespace ''{0}'' is not preceded with whitespace."/>
        </module>
        <module name="Indentation">
            <property
                name="basicOffset"
                value="4"/>
            <property
                name="braceAdjustment"
                value="0"/>
            <property
                name="caseIndent"
                value="4"/>
            <property
                name="throwsIndent"
                value="4"/>
            <property
                name="lineWrappingIndentation"
                value="4"/>
            <property
                name="arrayInitIndent"
                value="4"/>
        </module>
        <module name="AbbreviationAsWordInName">
            <property
                name="ignoreFinal"
                value="false"/>
            <property
                name="allowedAbbreviationLength"
                value="3"/>
        </module>
        <module name="OverloadMethodsDeclarationOrder"/>
        <module name="VariableDeclarationUsageDistance"/>
        <module name="CustomImportOrder">
            <property
                name="separateLineBetweenGroups"
                value="true"/>
            <property
                name="customImportOrderRules"
                value="STATIC###THIRD_PARTY_PACKAGE"/>
        </module>
        <module name="MethodParamPad"/>
        <module name="ParenPad"/>
        <module name="OperatorWrap">
            <property
                name="option"
                value="NL"/>
            <property
                name="tokens"
                value="BAND, BOR, BSR, BXOR, DIV, EQUAL, GE, GT, LAND, LE, LITERAL_INSTANCEOF, LOR, LT, MINUS, MOD, NOT_EQUAL, PLUS, QUESTION, SL, SR, STAR, METHOD_REF "/>
        </module>
        <module name="AnnotationLocation">
            <property
                name="id"
                value="AnnotationLocationMostCases"/>
            <property
                name="tokens"
                value="CLASS_DEF, INTERFACE_DEF, ENUM_DEF, METHOD_DEF, CTOR_DEF"/>
        </module>
        <module name="AnnotationLocation">
            <property
                name="id"
                value="AnnotationLocationVariables"/>
            <property
                name="tokens"
                value="VARIABLE_DEF"/>
            <property
                name="allowSamelineMultipleAnnotations"
                value="true"/>
        </module>
        <module name="NonEmptyAtclauseDescription"/>
        <module name="JavadocTagContinuationIndentation"/>
        <module name="SummaryJavadoc">
            <property
                name="forbiddenSummaryFragments"
                value="^@return the *|^This method returns |^A [{]@code [a-zA-Z0-9]+[}]( is a )"/>
        </module>
        <module name="AtclauseOrder">
            <property
                name="tagOrder"
                value="@param, @return, @throws, @deprecated"/>
            <property
                name="target"
                value="CLASS_DEF, INTERFACE_DEF, ENUM_DEF, METHOD_DEF, CTOR_DEF, VARIABLE_DEF"/>
        </module>
        <module name="MethodName">
            <property
                name="format"
                value="^[a-z]([a-zA-Z0-9]*)?$"/>
            <message
                key="name.invalidPattern"
                value="Method name ''{0}'' must match pattern ''{1}''."/>
        </module>
        <module name="SingleLineJavadoc">
            <property
                name="ignoreInlineTags"
                value="false"/>
        </module>
        <module name="EmptyCatchBlock">
            <property
                name="exceptionVariableName"
                value="expected"/>
        </module>
        <module name="EmptyBlock"/>
        <module name="EmptyStatement"/>
        <module name="CommentsIndentation"/>
        <module name="FinalParameters"/>
        <module name="FinalLocalVariable"/>
        <module name="FinalClass"/>
        <module name="ConstantName"/>
        <module name="CovariantEquals"/>
        <module name="EqualsHashCode"/>
        <module name="MethodCount">
            <property
                name="maxTotal"
                value="25"/>
        </module>
        <module name="MethodLength">
            <property
                name="max"
                value="150"/>
        </module>
        <module name="ExecutableStatementCount">
            <property
                name="max"
                value="150"/>
        </module>
        <module name="CyclomaticComplexity">
            <property
                name="max"
                value="12"/>
        </module>
        <module name="NestedForDepth">
            <property
                name="max"
                value="2"/>
        </module>
        <module name="NestedIfDepth">
            <property
                name="max"
                value="3"/>
        </module>
        <module name="NestedTryDepth">
            <property
                name="max"
                value="2"/>
        </module>
        <module name="ParameterNumber">
            <property
                name="max"
                value="6"/>
        </module>
        <module name="IllegalThrows"/>
        <module name="IllegalImport"/>
        <module name="MagicNumber">
            <property
                name="ignoreNumbers"
                value="-1,0,0.5,1,2,10,100"/>
        </module>
        <module name="MissingDeprecated"/>
        <module name="MissingOverride"/>
        <module name="MutableException"/>
        <module name="RedundantImport"/>
        <module name="RedundantModifier"/>
        <module name="RequireThis"/>
        <module name="SimplifyBooleanExpression"/>
        <module name="UnnecessaryParentheses"/>
        <module name="UnusedImports"/>
    </module>
</module>
