apply plugin: 'com.android.application'
apply plugin: 'io.fabric'
apply plugin: 'realm-android'
apply plugin: 'checkstyle'
apply plugin: 'findbugs'
apply plugin: 'jacoco'

jacoco {
    toolVersion '0.8.1'
}

checkstyle {
    toolVersion '8.11'
}

findbugs {
    toolVersion '3.0.1'
}

String NLP_API_TOKEN = System.getenv('NLP_API_TOKEN')

String VERSION_REVISION = 'git rev-list --count HEAD'.execute().text.trim()
String VERSION_HASH     = 'git rev-parse --short HEAD'.execute().text.trim()

android {
    compileSdkVersion 28
    buildToolsVersion '28.0.1'
    defaultConfig {
        applicationId    'com.github.ayltai.newspaper'
        minSdkVersion    project.hasProperty('ciBuild') ? 16 : 21
        targetSdkVersion 28
        versionCode      33
        versionName      '4.4.' + VERSION_REVISION + '-' + VERSION_HASH

        testInstrumentationRunner          'android.support.test.runner.AndroidJUnitRunner'
        testInstrumentationRunnerArguments disableAnalytics : 'true'

        vectorDrawables {
            useSupportLibrary true
        }
    }

    signingConfigs {
        release {
            storeFile     project.file('../key-store.jks')
            keyAlias      System.getenv('ANDROID_KEY_ALIAS')
            storePassword System.getenv('ANDROID_STORE_PASSWORD')
            keyPassword   System.getenv('ANDROID_KEY_PASSWORD')
        }
    }

    buildTypes {
        debug {
            multiDexEnabled     true
            testCoverageEnabled true

            ext.enableCrashlytics = false

            buildConfigField 'String', 'NLP_API_TOKEN', '\"' + NLP_API_TOKEN + '\"'
        }

        release {
            minifyEnabled   true
            shrinkResources true
            signingConfig   signingConfigs.release
            proguardFiles   getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            buildConfigField 'String', 'NLP_API_TOKEN', '\"' + NLP_API_TOKEN + '\"'
        }
    }

    testOptions {
        execution          'ANDROID_TEST_ORCHESTRATOR'
        animationsDisabled true

        unitTests {
            includeAndroidResources = true
            returnDefaultValues     = true
        }
    }

    lintOptions {
        abortOnError false
        disable     'MissingTranslation', 'RestrictedApi'
    }

    aaptOptions {
        cruncherEnabled project.hasProperty('ciBuild')
    }

    dexOptions {
        preDexLibraries !project.hasProperty('ciBuild')
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

checkstyle {
    configFile     rootProject.file('checkstyle.xml')
    showViolations true
}

configurations {
    codacy
}

ext {
    multidexVersion       = '1.0.3'
    supportLibraryVersion = '28.0.0-alpha3'
    architectureVersion   = '1.1.1'
    daggerVersion         = '2.16'
    retrofitVersion       = '2.4.0'
    frescoVersion         = '1.9.0'
    bigImageViewerVersion = '1.4.6'
    exoPlayerVersion      = '2.8.2'
    autoValueVersion      = '1.6.2'
    leakCanaryVersion     = '1.5.4'
    robolectricVersion    = '3.8'
    powerMockVersion      = '2.0.0-beta.5'
    espressoVersion       = '3.0.2'
}

repositories {
    flatDir {
        dirs './aars'
    }
}

dependencies {
    androidTestImplementation fileTree(dir : 'libs', include : [ '*.jar' ])

    // Multi-dex support
    debugImplementation       "com.android.support:multidex:$multidexVersion"
    androidTestImplementation "com.android.support:multidex-instrumentation:$multidexVersion"

    // Android Architecture libraries
    implementation ("android.arch.lifecycle:extensions:$architectureVersion") {
        exclude group : 'com.android.support'
    }
    annotationProcessor ("android.arch.lifecycle:compiler:$architectureVersion") {
        exclude group : 'com.android.support'
    }
    implementation "android.arch.lifecycle:common-java8:$architectureVersion"

    // Android Support libraries
    implementation "com.android.support:cardview-v7:$supportLibraryVersion"
    implementation "com.android.support:customtabs:$supportLibraryVersion"
    implementation "com.android.support:design:$supportLibraryVersion"

    // Firebase
    implementation ('com.google.firebase:firebase-core:16.0.1') {
        exclude group : 'com.android.support'
    }
    implementation 'com.google.firebase:firebase-config:16.0.0'

    // Reactive programming
    implementation 'io.reactivex.rxjava2:rxjava:2.1.16'
    implementation 'io.reactivex.rxjava2:rxandroid:2.0.2'

    // Dependency injection
    implementation      "com.google.dagger:dagger:$daggerVersion"
    annotationProcessor "com.google.dagger:dagger-compiler:$daggerVersion"

    // Networking
    implementation 'com.squareup.okhttp3:okhttp:3.11.0'
    implementation "com.squareup.retrofit2:retrofit:$retrofitVersion"
    implementation "com.squareup.retrofit2:adapter-rxjava2:$retrofitVersion"
    implementation "com.squareup.retrofit2:converter-scalars:$retrofitVersion"
    implementation ("com.squareup.retrofit2:converter-simplexml:$retrofitVersion") {
        exclude group : 'stax'
        exclude group : 'xpp3'
    }

    // Database
    implementation 'io.realm:android-adapters:3.0.0'

    // Image processing
    implementation "com.facebook.fresco:fresco:$frescoVersion"
    implementation "com.facebook.fresco:imagepipeline-okhttp3:$frescoVersion"
    implementation "com.github.piasy:BigImageViewer:$bigImageViewerVersion"
    implementation 'com.github.stfalcon:frescoimageviewer:0.5.0'
    implementation "com.android.support:exifinterface:$supportLibraryVersion"
    implementation "com.google.android.gms:play-services-vision:15.0.2"

    // Video processing
    implementation ("com.google.android.exoplayer:exoplayer-core:$exoPlayerVersion") {
        exclude group : 'com.android.support'
    }
    implementation ("com.google.android.exoplayer:exoplayer-ui:$exoPlayerVersion") {
        exclude group : 'com.android.support'
    }
    implementation ("com.google.android.exoplayer:extension-okhttp:$exoPlayerVersion") {
        exclude group : 'com.android.support'
    }

    // Natural language processing
    implementation 'com.textrazor:textrazor:1.0.12'

    // UI components
    implementation 'com.squareup.flow:flow:1.0.0-alpha3'
    implementation 'com.nex3z:flow-layout:1.2.2'

    // Eye candies
    implementation 'jp.wasabeef:recyclerview-animators:2.3.0'
    implementation 'io.supercharge:shimmerlayout:2.1.0'
    implementation 'com.github.castorflex.smoothprogressbar:library:1.3.0'
    implementation 'pub.hanks:smallbang:1.2.2'
    implementation 'com.flaviofaria:kenburnsview:1.0.7'
    implementation 'io.github.inflationx:calligraphy3:3.0.0'

    // Code generation tools
    compileOnly         "com.google.auto.value:auto-value-annotations:$autoValueVersion"
    annotationProcessor "com.google.auto.value:auto-value:$autoValueVersion"
    annotationProcessor 'com.ryanharter.auto.value:auto-value-parcel:0.2.6'
    implementation      'com.google.code.gson:gson:2.8.5'

    // Fabric
    implementation ('com.crashlytics.sdk.android:crashlytics:2.9.4@aar') {
        transitive = true
    }

    // Debugging
    implementation        'com.akaita.java:rxjava2-debug:1.2.2'
    debugImplementation   "com.squareup.leakcanary:leakcanary-android:$leakCanaryVersion"
    releaseImplementation "com.squareup.leakcanary:leakcanary-android-no-op:$leakCanaryVersion"
    testImplementation    "com.squareup.leakcanary:leakcanary-android-no-op:$leakCanaryVersion"

    // Unit testing
    testImplementation 'org.mockito:mockito-core:2.19.2'
    testImplementation "org.powermock:powermock-module-junit4:$powerMockVersion"
    testImplementation "org.powermock:powermock-module-junit4-rule:$powerMockVersion"
    testImplementation "org.powermock:powermock-api-mockito2:$powerMockVersion"
    testImplementation "org.powermock:powermock-classloading-xstream:$powerMockVersion"
    testImplementation "org.robolectric:robolectric:$robolectricVersion"
    testImplementation "org.robolectric:shadows-multidex:$robolectricVersion"
    testImplementation 'org.json:json:20180130'

    // Instrumented testing
    androidTestImplementation (name : 'cloudtestingscreenshotter_lib', ext : 'aar')
    androidTestImplementation ("com.android.support.test.espresso:espresso-core:$espressoVersion") {
        exclude group : 'com.android.support'
    }
    androidTestImplementation ("com.android.support.test.espresso:espresso-contrib:$espressoVersion") {
        exclude group : 'com.android.support'
    }
    androidTestImplementation ("com.android.support.test.espresso:espresso-intents:$espressoVersion") {
        exclude group : 'com.android.support'
    }
    androidTestUtil 'com.android.support.test:orchestrator:1.0.2'

    // Code coverage by Codacy
    codacy 'com.github.codacy:codacy-coverage-reporter:4.0.1'
}

configurations.all {
    resolutionStrategy {
        force "com.android.support:support-v4:$supportLibraryVersion"
        force "com.android.support:support-media-compat:$supportLibraryVersion"
        force 'com.google.code.findbugs:jsr305:3.0.2'
    }
}

task customCheckstyle(type : Checkstyle) {
    description    = 'Running Checkstyle'
    group          = 'verification'
    ignoreFailures = true
    showViolations = true

    configFile file("$rootProject.rootDir/checkstyle.xml")

    source  'src/main/java', 'src/debug/java'
    include '**/*.java'
    exclude '**/*Test.java'
    exclude '**/gen/**'
    exclude '**/R.java'
    exclude '**/BuildConfig.java'

    reports {
        xml.enabled      = false
        html.enabled     = true
        xml.destination  file("$project.buildDir/reports/checkstyle/checkstyle-output.xml")
        html.destination file("$project.buildDir/reports/checkstyle/checkstyle-output.html")
    }

    classpath = files()
}

task customFindBugs(type : FindBugs, dependsOn : 'assembleDebug') {
    description    = 'Runing FindBugs'
    group          = 'verification'
    effort         = 'max'
    reportLevel    = 'medium'
    source         = fileTree('src/main/java')
    classes        = fileTree('build/intermediates/classes/debug')
    classpath      = files()
    ignoreFailures = true

    // Use this only if you want exclude some errors
    excludeFilter = file("$rootProject.rootDir/findbugs-android-exclude.xml")

    reports {
        xml.enabled      = false
        xml.withMessages = true
        html.enabled     = true
        xml.destination  file("$project.buildDir/reports/findbugs/findbugs-output.xml")
        html.destination file("$project.buildDir/reports/findbugs/findbugs-output.html")
    }
}

def coverageSourceDirs = [
    'src/main/java',
    'src/debug/java'
]

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
}

task jacocoTestReport(type : JacocoReport, dependsOn : 'testDebugUnitTest') {
    description = 'Generate JaCoCo coverage reports'
    group       = 'Reporting'

    reports {
        xml.enabled  = true
        html.enabled = true
    }

    classDirectories = fileTree(
        dir      : 'build/intermediates/classes/debug',
        excludes : [
            '**/R.class',
            '**/R$*.class',
            '**/*$ViewInjector*.*',
            '**/*$ViewBinder*.*',
            '**/BuildConfig.*',
            '**/Manifest*.*',
            '**/*RealmProxy.*',
            '**/*ColumnInfo.*',
            '**/*RealmModule*.*',
            '**/AutoValue_*.*',
            '**/Dagger*.*',
            '**/*Module_Provide*Factory.*',
            '**/*_Factory.*',
            '**/*_MembersInjector.*',
            '**/*_LifecycleAdapter.*'
        ]
    )

    sourceDirectories = files(coverageSourceDirs)
    executionData     = fileTree(
        dir     : "$buildDir",
        include : [ 'jacoco/testDebugUnitTest.exec', 'outputs/code-coverage/connected/*coverage.ec' ]
    )

    doFirst {
        files('build/intermediates/classes/debug').getFiles().each { file ->
            if (file.name.contains('$$')) {
                file.renameTo(file.path.replace('$$', '$'))
            }
        }
    }
}

task uploadCoverageToCodacy(type : JavaExec, dependsOn : jacocoTestReport) {
    main      = "com.codacy.CodacyCoverageReporter"
    classpath = configurations.codacy

    args = [
        "report",
        "-l",
        "Java",
        "-r",
        "${buildDir}/reports/jacoco/jacocoTestReport/jacocoTestReport.xml"
    ]
}

task (codacyDepsize) << {
    def size = 0

    configurations.codacy.collect {
        it.length() / (1024 * 1024)
    }.each {
        size += it
    }

    println "Total dependencies size: ${Math.round(size * 100) / 100} MB"

    configurations.codacy.sort {
        -it.length()
    }.each {
        println "${it.name}: ${Math.round(it.length() / (1024) * 100) / 100} KB"
    }
}

task (codacyLocs) << {
    configurations.codacy.each {
        String jarName = it

        println jarName
    }
}

apply plugin: 'com.google.gms.google-services'
